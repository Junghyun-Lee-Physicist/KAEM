//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id$
// 
/// \file PrimaryGeneratorAction.cc
/// \brief Implementation of the PrimaryGeneratorAction class

#include "PrimaryGeneratorAction.hh"

#include "G4RunManager.hh"
#include "G4IonTable.hh"
#include "G4Geantino.hh"


#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4Event.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

PrimaryGeneratorAction::PrimaryGeneratorAction()
 : G4VUserPrimaryGeneratorAction(),
   fParticleGun(0)
{
  G4int nofParticles = 1;
  fParticleGun = new G4ParticleGun(nofParticles);

  // default particle kinematic
  //

  //fParticleGun->SetParticleEnergy(100*keV);
  fParticleGun->SetParticlePosition(G4ThreeVector(0.,0.,0.));
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

PrimaryGeneratorAction::~PrimaryGeneratorAction()
{
  delete fParticleGun;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void PrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
///////////////////////////////////////////////////////////////////////////////////////
  G4int RndGenMode = 3;

  if(RndGenMode == 0){
  G4double theta = 2 * M_PI * G4UniformRand();
  G4double phi = acos(1 - 2 * G4UniformRand());
  //G4double phi = M_PI * G4UniformRand();
  //사실 phi랑 theta가 뒤바뀐 셈인데 크게 신경 쓰지 말자

  G4double x = sin(phi) * cos(theta);
  G4double y = sin(phi) * sin(theta);
  G4double z = cos(phi);

  fParticleGun->SetParticleMomentumDirection(G4ThreeVector(x,y,z));
  //fParticleGun->SetParticleMomentumDirection(G4ThreeVector(0.,1.,0.));

  //fParticleGun->GetParticleDefinition() == G4Positron::Positron();
  auto particleDefinition
    = G4ParticleTable::GetParticleTable()->FindParticle("e+");
  fParticleGun->SetParticleDefinition(particleDefinition);

  G4double pE = G4UniformRand()*215.5*keV;  

  fParticleGun->SetParticleEnergy(pE);
  fParticleGun->GeneratePrimaryVertex(anEvent);
  }

  else if(RndGenMode == 2){
  G4double theta = 2. * M_PI * G4UniformRand();
  //G4double phi = acos(1 - 2 * G4UniformRand());
 //사실 phi랑 theta가 뒤바뀐 셈인데 크게 신경 쓰지 말자
  //G4double phi = 0.55 + (M_PI/180.0)*1.0*G4UniformRand();
  G4double Degree = 42.;
  G4double phi = Degree * (M_PI/180.);
  G4cout<<"Current phi set = "<<Degree<<", "<<phi<<" (radian)"<<G4endl;

  G4double x = sin(phi) * cos(theta);
  G4double y = sin(phi) * sin(theta);
  G4double z = cos(phi);

  fParticleGun->SetParticleMomentumDirection(G4ThreeVector(x,y,z));
  //fParticleGun->SetParticleMomentumDirection(G4ThreeVector(0.,1.,0.));

  //fParticleGun->GetParticleDefinition() == G4Positron::Positron();
  auto particleDefinition
    = G4ParticleTable::GetParticleTable()->FindParticle("e+");
  fParticleGun->SetParticleDefinition(particleDefinition);

  G4double pE = 544.0*keV;

  fParticleGun->SetParticleEnergy(pE);
  fParticleGun->GeneratePrimaryVertex(anEvent);
  }

  else if(RndGenMode == 3){
	
      G4ThreeVector Na22_Direction(0., 0., 0.);
      fParticleGun->SetParticleEnergy(0.);
      fParticleGun->SetParticleMomentumDirection( G4ThreeVector(0. ,0., 0.) );
      fParticleGun->SetParticlePosition( G4ThreeVector(0. ,0. ,0.) );

	  G4int Z = 11, A = 22;
	  G4double ionCharge   = 3.*eplus;
	  //G4double ionCharge   = 0.*eplus;
	  G4double excitEnergy = 0.*keV;
      G4ParticleDefinition* Na22
	          = G4IonTable::GetIonTable()->GetIon(Z,A,excitEnergy);

	  fParticleGun->SetParticleDefinition(Na22);
	  fParticleGun->SetParticleCharge(ionCharge);
	  //Na22-> SetPDGLifeTime(0);

	  fParticleGun->GeneratePrimaryVertex(anEvent);

  }

  else if(RndGenMode == 4){
	
	  G4cout<<"Particle gun for chenking Simulation geometry"<<G4endl;
      fParticleGun->SetParticleEnergy(1.0*MeV);
      fParticleGun->SetParticleMomentumDirection( G4ThreeVector(0. ,0., 1.0) );
      fParticleGun->SetParticlePosition( G4ThreeVector(0. ,0. ,0.) );

      auto particleDefinition
      = G4ParticleTable::GetParticleTable()->FindParticle("geantino");
      fParticleGun->SetParticleDefinition(particleDefinition);

	  fParticleGun->SetParticleDefinition(particleDefinition);
	  G4cout<<"Momentum 0 0 1 geantino is generated"<<G4endl;
	  fParticleGun->GeneratePrimaryVertex(anEvent);

	  fParticleGun->SetParticleMomentumDirection( G4ThreeVector(0. ,0., -1.0) );
  	  G4cout<<"Momentum 0 0 -1 geantino is generated"<<G4endl;
	  fParticleGun->GeneratePrimaryVertex(anEvent);

  }


  //else fParticleGun->GeneratePrimaryVertex(anEvent);


/////////////////////////////////////////////////////////////////////////////////////


/*
  G4double worldZHalfLength = 0.;
  auto worldLV = G4LogicalVolumeStore::GetInstance()->GetVolume("World");

// Check that the world volume has box shape
  G4Box* worldBox = nullptr;
  if (  worldLV ) {
    worldBox = dynamic_cast<G4Box*>(worldLV->GetSolid());
  }

  if ( worldBox ) {
    worldZHalfLength = worldBox->GetZHalfLength();  
  }
  else  {
    G4ExceptionDescription msg;
    msg << "World volume of box shape not found." << G4endl;
    msg << "Perhaps you have changed geometry." << G4endl;
    msg << "The gun will be place in the center.";
    G4Exception("PrimaryGeneratorAction::GeneratePrimaries()",
      "MyCode0002", JustWarning, msg);
  } 
  
  // Set gun position
  fParticleGun
    ->SetParticlePosition(G4ThreeVector(0., 0., -worldZHalfLength));

  fParticleGun->GeneratePrimaryVertex(anEvent);
*/
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

